package com.fengxing.mcp.fdialog;import android.app.AlertDialog;import android.app.Dialog;import android.app.DialogFragment;import android.app.FragmentManager;import android.app.FragmentTransaction;import android.content.DialogInterface;import android.graphics.drawable.Drawable;import android.os.Bundle;import android.support.annotation.Nullable;import android.view.Gravity;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.Window;import android.view.WindowManager;/** * Created by fengxing on 2018/5/8. *//** * ### 前言 * 用Fragment碎片显示一个对话框。浮动在其Activity窗口之上。fragment包含一个Dialog对象。根据fragment的状态适当的显示对话框（dialog的状态会随着fragment的生命周期变化）。对话框的控制（决定何时显示，隐藏，解除）应通过此处的API完成，而不是直接调用对话框的本身。 * <p> * 实现应该重写这个类（DialogFragment）并实现onCreateView（LayoutInflater，ViewGroup，Bundle）来提供对话框的内容。或者，可以重写onCreateDialog（Bundle）以创建一个完全自定义的对话框，例如AlertDialog及其自己的内容。 * <p> * ### 生命周期 * Fragment会执行各种操作来保持Fragment的生命周期，而不是Dialog的生命周期.注意**dialog通常是独立的实体，是独立的窗口，接受自己的输入事件，和决定自己何时消失（通过回退事件和点击事件）** * <p> * FragmentDialog需要确保Fragment和Dialog发生的壮体啊保持一致。要做到这一点，DialogFragment需要监视Dialog中的退出事件，并在发生时删除自己的状态。这就意味着要使用show(FragmentManager, String)或者show(FragmentTransaction, String)添加DialogFragment实例到Ui中。因为这些会跟踪当Dialog消失时，应该如何移出。 */public abstract class BaseDialogFragment extends DialogFragment implements DialogInterface.OnShowListener {    private static final String BUNDLE_KEY_NUM = "bundleKeyNum";    private Dialog mDialog;//    /**//     * 创建BaseDialogFragment实例 num作为参数//     *//     * @param num//     * @return//     *///    public static BaseDialogFragment newInstance(int num) {//        BaseDialogFragment dialogFragment = new BaseDialogFragment();//        Bundle bundle = new Bundle();//        bundle.putInt(BUNDLE_KEY_NUM, num);//        dialogFragment.setArguments(bundle);//        return dialogFragment;//    }    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        Bundle arguments = getArguments();    }    protected abstract View getDialogView();    protected abstract int getResLayout();    protected abstract void bindView(View view);    @Nullable    @Override    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, Bundle savedInstanceState) {        //return super.onCreateView(inflater, container, savedInstanceState);        View view = null;        if (getResLayout() > 0) {            view = inflater.inflate(getResLayout(), container, false);        }        if (getDialogView() != null) {            view = getDialogView();        }        if (view != null) {            bindView(view);        } else {            onCreateDialog(null);        }        return view;    }    @Override    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {        super.onViewCreated(view, savedInstanceState);        mDialog = getDialog();        mDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);    }    @Override    public void show(FragmentManager manager, String tag) {        super.show(manager, tag);    }    @Override    public void onStart() {        super.onStart();        mDialog.setCancelable(getCancelable());        mDialog.setCanceledOnTouchOutside(getCanceledOnTouchOutside());        Window window = mDialog.getWindow();        if (window != null) {            //设置位置 如果不设置 默认居中            window.setGravity(getGravity());            //设置背景颜色            //window.setBackgroundDrawable(mBackGroundDrawable == null ? (new ColorDrawable(Color.TRANSPARENT)) : mBackGroundDrawable);            WindowManager.LayoutParams attributes = window.getAttributes();            //设置透明度 1.0f -- 0.0f            attributes.alpha = getAlpha();            //设置宽度 宽度按照缩放比例 1.0f -- 0.0f            if (getWidth() > 0) {                attributes.width = (int) (getWindowWidth() * getWidth());            } else {                attributes.width = WindowManager.LayoutParams.WRAP_CONTENT;            }            //设置高度 高度按照比例缩放            if (getHeight() > 0) {                attributes.height = (int) (getWindowHeight() * getHeight());            } else {                attributes.height = WindowManager.LayoutParams.WRAP_CONTENT;            }            //设置窗体的黑暗度 0.0 不变黑 1.0f 背景完全变黑 我建议使用0.6f            if (getDimAmount() != -1) {                attributes.dimAmount = getDimAmount();                window.addFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);            } else {                window.clearFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);            }            attributes.x = getX();            attributes.y = getY();            if (getAnimationStyle() != 0) {                attributes.windowAnimations = getAnimationStyle();            }            window.setAttributes(attributes);        }    }    @Override    public int show(FragmentTransaction transaction, String tag) {        return super.show(transaction, tag);    }    @Override    public void dismiss() {        super.dismiss();    }    /**     * 如果同时实现 onCreateDialog 和 onCreateView 会显示 onCreateDialog创建的对话框     *     * @param savedInstanceState     * @return     */    @Override    public Dialog onCreateDialog(Bundle savedInstanceState) {        View view = getView();        if(view == null){        }        return super.onCreateDialog(savedInstanceState);//        return new AlertDialog.Builder(getActivity())//                .setIcon(R.drawable.ic_launcher_background)//                .setTitle("测试AlertDialog")//                .setMessage("天地不仁以万物为刍狗")//                .setNegativeButton("确定", new DialogInterface.OnClickListener() {//                    @Override//                    public void onClick(DialogInterface dialog, int which) {////                    }//                })//                .setPositiveButton("取消", new DialogInterface.OnClickListener() {//                    @Override//                    public void onClick(DialogInterface dialog, int which) {//                        dialog.dismiss();//                    }//                }).create();    }    private int getWindowWidth() {        return getActivity().getWindowManager().getDefaultDisplay().getWidth();    }    private int getWindowHeight() {        return getActivity().getWindowManager().getDefaultDisplay().getHeight();    }    public float getAlpha() {        return 1.0f;    }    public boolean getCancelable() {        return false;    }    public boolean getCanceledOnTouchOutside() {        return false;    }    public int getGravity() {        return Gravity.CENTER;    }    public float getWidth() {        return 0.0f;    }    public float getHeight() {        return 0.0f;    }    public float getDimAmount() {        return 0;    }    public int getY() {        return 0;    }    public int getX() {        return 0;    }    public int getAnimationStyle() {        return 0;    }}